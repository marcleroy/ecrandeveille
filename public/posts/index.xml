<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Techno watch site</title>
    <link>https://marcleroy.github.io/posts/</link>
    <description>Recent content in Posts on Techno watch site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Mar 2020 23:25:38 +0000</lastBuildDate><atom:link href="https://marcleroy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Xamarin Forms, use C# to build views</title>
      <link>https://marcleroy.github.io/posts/xamarin-forms-use-c-to-build-views/</link>
      <pubDate>Sun, 08 Mar 2020 23:25:38 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/xamarin-forms-use-c-to-build-views/</guid>
      <description>MVVM problems
ImmutableUI and TDD with Xamarin.Forms  **Posted: **May 6, 2018 / **By: **Adam Pedley / **In: **Code  See praeclarum/ImmutableUI and adamped/Pattern From
https://xamarinhelp.com/wp-content/uploads/2017/01/xamarinhelp.png
MVVM and XAML has failed me. A promise of abstracting to make reusable components, but they never get reused. Layers of complexity for virtually no benefit. If reuse is to happen as planned, it would require almost mystical level foresight into the future, across multiple projects.</description>
    </item>
    
    <item>
      <title>RegEx infos</title>
      <link>https://marcleroy.github.io/posts/regex-infos/</link>
      <pubDate>Sun, 08 Mar 2020 23:07:42 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/regex-infos/</guid>
      <description>Reference site for RegEx construction
RegularRegExpressionsEx101
Example for french plates https://regex101.com/r/VGjLx1/1
Dinausor RegEx https://www.rexegg.com/
TODO: adding samples&amp;hellip;</description>
    </item>
    
    <item>
      <title>Visual Studio Code Remote Development</title>
      <link>https://marcleroy.github.io/posts/visual-studio-code-remote-development/</link>
      <pubDate>Fri, 28 Feb 2020 23:32:01 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/visual-studio-code-remote-development/</guid>
      <description>Visual Studio Code Remote Development allows you to use a container, remote machine, or the Windows Subsystem for Linux (WSL) as a full-featured development environment. It effectively splits VS Code in half and runs the client part on your machine and the &amp;ldquo;VS Code Server&amp;rdquo; basically _anywhere else. _The Remote Development extension pack includes three extensions. See the following articles to get started with each of them:
 Remote - SSH - Connect to any location by opening folders on a remote machine/VM using SSH.</description>
    </item>
    
    <item>
      <title>Utiliser Bogus avec les Xamarin.Forms</title>
      <link>https://marcleroy.github.io/posts/bogus/</link>
      <pubDate>Fri, 28 Feb 2020 22:58:29 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/bogus/</guid>
      <description>ici : Utiliser Bogus avec les Xamarin.Forms
Bogus est un complément indispensable pour les tests mais aussi la création dynamique de données de design. Connaissez-vous cette extension ?
Bogus Bogus est une bibliothèque de Brian Chavez à utiliser dans les tests automatisés pour générer automatiquement des données de test de différents types. On peut l’utiliser dans le cadre de tests NUNIT ou de tout autres outils de test. On peut même s’en servir astucieusement dans le cadre d’un développement classique pour générer des données de Design aléatoires mais crédibles par exemple.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://marcleroy.github.io/posts/29/</link>
      <pubDate>Fri, 28 Feb 2020 22:50:50 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/29/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Home</title>
      <link>https://marcleroy.github.io/posts/home/</link>
      <pubDate>Fri, 28 Feb 2020 22:50:49 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/home/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Chocolatey management</title>
      <link>https://marcleroy.github.io/posts/chocolatey-management/</link>
      <pubDate>Thu, 06 Feb 2020 21:42:13 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/chocolatey-management/</guid>
      <description>Chocolatey est un gestionnaire de paquets pour Windows. C’est un programme qui vous permet d’installer et de désinstaller des applications à la vitesse de l’éclair en utilisant la commande choco. Son point fort : il est capable de mettre à jour l’ensemble des applications installées sur votre système avec une seule commande !
See https://github.com/chocolatey/choco/wiki/CommandsInstall#options-and-switches
Source de cet article :
From https://lecrabeinfo.net/chocolatey-gestionnaire-paquets-windows.html
Pour mettre à jour des logiciels avec Chocolatey :</description>
    </item>
    
    <item>
      <title>Managing the NuGet packages</title>
      <link>https://marcleroy.github.io/posts/managing-the-nuget-packages/</link>
      <pubDate>Fri, 24 Jan 2020 21:23:22 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/managing-the-nuget-packages/</guid>
      <description>From Managing the global packages, cache, and temp folders here
Viewing folder locations You can view locations using the nuget locals command:
# Display locals for all folders: global-packages, http cache, temp and plugins cache nuget locals all -list You can also view folder locations using the dotnet nuget locals command:
dotnet nuget locals all --list Clearing local folders If you encounter package installation problems or otherwise want to ensure that you&amp;rsquo;re installing packages from a remote gallery, use the locals --clear option (dotnet.</description>
    </item>
    
    <item>
      <title>Clean Desktop Dev Machine</title>
      <link>https://marcleroy.github.io/posts/clean-desktop-dev-machine/</link>
      <pubDate>Fri, 24 Jan 2020 21:09:44 +0000</pubDate>
      
      <guid>https://marcleroy.github.io/posts/clean-desktop-dev-machine/</guid>
      <description>PatchCleaner Clean c:\Windows\Installer
PatchCleaner obtains a list of known patches that are required by the computer from the Operating system. This list is then compared against all the files in the c:\Windows\Installer directory
DriverStore Explorer - rapr https://github.com/lostindark/DriverStoreExplorer
DriverStore Explorer [RAPR] makes it easier to deal with Windows driver store. Supported operations include enumeration, adding a driver package (stage), adding &amp;amp; installing, deletion and force deletion from the driver store.</description>
    </item>
    
  </channel>
</rss>
